<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jl.psi.mapper.PersonMapper">
	<resultMap id="BaseResultMap" type="com.jl.psi.model.Person">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="identifier" jdbcType="VARCHAR" property="identifier" />
		<result column="login_name" jdbcType="VARCHAR" property="loginName" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="type" jdbcType="VARCHAR" property="type" />
		<result column="department_id" jdbcType="INTEGER" property="departmentId" />
		<result column="entry_time" jdbcType="DATE" property="entryTime" />
		<result column="duties" jdbcType="VARCHAR" property="duties" />
		<result column="education" jdbcType="VARCHAR" property="education" />
		<result column="sex" jdbcType="VARCHAR" property="sex" />
		<result column="birth_time" jdbcType="DATE" property="birthTime" />
		<result column="native_place" jdbcType="VARCHAR" property="nativePlace" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="home_phone" jdbcType="VARCHAR" property="homePhone" />
		<result column="common_phone" jdbcType="VARCHAR" property="commonPhone" />
		<result column="reserve_phone" jdbcType="VARCHAR" property="reservePhone" />
		<result column="postcode" jdbcType="VARCHAR" property="postcode" />
		<result column="home_address" jdbcType="VARCHAR" property="homeAddress" />
		<result column="mailbox" jdbcType="VARCHAR" property="mailbox" />
		<result column="quit_time" jdbcType="DATE" property="quitTime" />
		<result column="business" jdbcType="INTEGER" property="business" />
		<result column="quite" jdbcType="INTEGER" property="quite" />
		<result column="operator_identifier" jdbcType="VARCHAR"
			property="operatorIdentifier" />
		<result column="operator_time" jdbcType="TIMESTAMP" property="operatorTime" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
		<result column="id_number" jdbcType="VARCHAR" property="idNumber" />
		<result column="warehouse_id" jdbcType="INTEGER" property="warehouseId" />
		<result column="warehouseName" jdbcType="VARCHAR" property="warehouseName" />
		<result column="place" jdbcType="VARCHAR" property="place" />
		<result column="is_delete" jdbcType="INTEGER" property="isDelete" />
		
		<association property="user" javaType="com.jl.psi.model.Person"
			resultMap="PersonResultMap" />
		<association property="department" javaType="com.jl.psi.model.Department"
			resultMap="DepartmentResultMap" />
			
		<!-- 一对多,要使用collection映射. collection:对关联查询到的多条记录映射到集合中 ;property:将关联查询到的多条记录映射到user类的那个属性 
			ofType:指定映射的集合属性中pojo的类型 -->
		<collection property="permissions" ofType="com.jl.psi.model.Permission">
			<!-- id:唯一标识 ;property：要将权限的唯一标识映射到com.jl.psi.model.Permission的那个属性 -->
			<id column="pid" jdbcType="INTEGER" property="id" />
			<result column="user_id" jdbcType="INTEGER" property="userId" />
			<result column="menu_id" jdbcType="INTEGER" property="menuId" />
			<result column="poperator_identifier" jdbcType="VARCHAR"
				property="operatorIdentifier" />
			<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
			<association property="menu" javaType="Menu" resultMap="MenuMap"/>
		</collection>
	</resultMap>
	
	<resultMap id="MenuMap" type="com.jl.psi.model.Menu">
	    <id column="mid" jdbcType="INTEGER" property="id" />
	    <result column="mparent_id" jdbcType="INTEGER" property="parentId" />
	    <result column="mname" jdbcType="VARCHAR" property="name" />
	    <result column="url" jdbcType="VARCHAR" property="url" />
	    <result column="icon" jdbcType="VARCHAR" property="icon" />
	    <result column="sort" jdbcType="INTEGER" property="sort" />
	    <result column="is_effective" jdbcType="INTEGER" property="isEffective" />
	  </resultMap>

	<resultMap id="PersonResultMap" type="com.jl.psi.model.Person">
		<result column="userName" jdbcType="VARCHAR" property="name" />
	</resultMap>

	<resultMap id="DepartmentResultMap" type="com.jl.psi.model.Department">
		<result column="departmentName" jdbcType="VARCHAR" property="name" />
	</resultMap>

	<sql id="Base_Column_List">
		id, name, identifier,login_name, password,type,
		department_id,
		entry_time, duties, education, sex, birth_time,
		native_place,
		phone, home_phone, common_phone, reserve_phone, postcode,
		home_address,
		mailbox,
		quit_time, business, quite, operator_identifier,
		operator_time, remark,
		id_number,warehouse_id,is_delete
	</sql>

	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from person
		where id = #{id,jdbcType=INTEGER}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from person
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="com.jl.psi.model.Person">
		insert into person (id, name,
		identifier,login_name,password, type,
		department_id, entry_time,
		duties,
		education, sex,
		birth_time,
		native_place, phone, home_phone,
		common_phone,
		reserve_phone, postcode,
		home_address, mailbox, quit_time,
		business,
		quite, operator_identifier,
		operator_time, remark, id_number,warehouse_id,is_delete
		)
		values
		(#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
		#{identifier,jdbcType=VARCHAR},#{loginName,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{type,jdbcType=VARCHAR},
		#{departmentId,jdbcType=INTEGER},
		#{entryTime,jdbcType=DATE},
		#{duties,jdbcType=VARCHAR},
		#{education,jdbcType=VARCHAR},
		#{sex,jdbcType=VARCHAR},
		#{birthTime,jdbcType=DATE},
		#{nativePlace,jdbcType=VARCHAR},
		#{phone,jdbcType=VARCHAR},
		#{homePhone,jdbcType=VARCHAR},
		#{commonPhone,jdbcType=VARCHAR},
		#{reservePhone,jdbcType=VARCHAR},
		#{postcode,jdbcType=VARCHAR},
		#{homeAddress,jdbcType=VARCHAR},
		#{mailbox,jdbcType=VARCHAR},
		#{quitTime,jdbcType=DATE},
		#{business,jdbcType=INTEGER},
		#{quite,jdbcType=INTEGER},
		#{operatorIdentifier,jdbcType=VARCHAR},
		#{operatorTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR},
		#{idNumber,jdbcType=VARCHAR},#{warehouseId,jdbcType=INTEGER}
		, #{isDelete,jdbcType=INTEGER})
	</insert>

	<insert id="insertSelective" parameterType="com.jl.psi.model.Person" 
		useGeneratedKeys="true" keyProperty="id">
		insert into person
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="identifier != null">
				identifier,
			</if>
			<if test="loginName != null">
				login_name,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="departmentId != null">
				department_id,
			</if>
			<if test="entryTime != null">
				entry_time,
			</if>
			<if test="duties != null">
				duties,
			</if>
			<if test="education != null">
				education,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="birthTime != null">
				birth_time,
			</if>
			<if test="nativePlace != null">
				native_place,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="homePhone != null">
				home_phone,
			</if>
			<if test="commonPhone != null">
				common_phone,
			</if>
			<if test="reservePhone != null">
				reserve_phone,
			</if>
			<if test="postcode != null">
				postcode,
			</if>
			<if test="homeAddress != null">
				home_address,
			</if>
			<if test="mailbox != null">
				mailbox,
			</if>
			<if test="quitTime != null">
				quit_time,
			</if>
			<if test="business != null">
				business,
			</if>
			<if test="quite != null">
				quite,
			</if>
			<if test="operatorIdentifier != null">
				operator_identifier,
			</if>
			<if test="operatorTime != null">
				operator_time,
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="idNumber != null">
				id_number,
			</if>
			<if test="warehouseId != null">
				warehouse_id,
			</if>
			<if test="place != null">
				place,
			</if>
			<if test="isDelete != null">
				is_delete,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="identifier != null">
				#{identifier,jdbcType=VARCHAR},
			</if>
			<if test="loginName != null">
				#{loginName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				#{type,jdbcType=VARCHAR},
			</if>
			<if test="departmentId != null">
				#{departmentId,jdbcType=INTEGER},
			</if>
			<if test="entryTime != null">
				#{entryTime,jdbcType=DATE},
			</if>
			<if test="duties != null">
				#{duties,jdbcType=VARCHAR},
			</if>
			<if test="education != null">
				#{education,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=VARCHAR},
			</if>
			<if test="birthTime != null">
				#{birthTime,jdbcType=DATE},
			</if>
			<if test="nativePlace != null">
				#{nativePlace,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				#{phone,jdbcType=VARCHAR},
			</if>
			<if test="homePhone != null">
				#{homePhone,jdbcType=VARCHAR},
			</if>
			<if test="commonPhone != null">
				#{commonPhone,jdbcType=VARCHAR},
			</if>
			<if test="reservePhone != null">
				#{reservePhone,jdbcType=VARCHAR},
			</if>
			<if test="postcode != null">
				#{postcode,jdbcType=VARCHAR},
			</if>
			<if test="homeAddress != null">
				#{homeAddress,jdbcType=VARCHAR},
			</if>
			<if test="mailbox != null">
				#{mailbox,jdbcType=VARCHAR},
			</if>
			<if test="quitTime != null">
				#{quitTime,jdbcType=DATE},
			</if>
			<if test="business != null">
				#{business,jdbcType=INTEGER},
			</if>
			<if test="quite != null">
				#{quite,jdbcType=INTEGER},
			</if>
			<if test="operatorIdentifier != null">
				#{operatorIdentifier,jdbcType=VARCHAR},
			</if>
			<if test="operatorTime != null">
				#{operatorTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="idNumber != null">
				#{idNumber,jdbcType=VARCHAR},
			</if>
			<if test="warehouseId != null">
				#{warehouseId,jdbcType=INTEGER},
			</if>
			 <if test="place != null">
				#{place,jdbcType=VARCHAR},
			</if>
			<if test="isDelete != null">
				#{isDelete,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective" parameterType="com.jl.psi.model.Person">
		update person
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="identifier != null">
				identifier = #{identifier,jdbcType=VARCHAR},
			</if>
			<if test="loginName != null">
				login_name = #{loginName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=VARCHAR},
			</if>
			<if test="departmentId != null">
				department_id = #{departmentId,jdbcType=INTEGER},
			</if>
			<if test="true">
				entry_time = #{entryTime,jdbcType=DATE},
			</if>
			<if test="duties != null">
				duties = #{duties,jdbcType=VARCHAR},
			</if>
			<if test="education != null">
				education = #{education,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=VARCHAR},
			</if>
			<if test="true">
				birth_time = #{birthTime,jdbcType=DATE},
			</if>
			<if test="nativePlace != null">
				native_place = #{nativePlace,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="homePhone != null">
				home_phone = #{homePhone,jdbcType=VARCHAR},
			</if>
			<if test="commonPhone != null">
				common_phone = #{commonPhone,jdbcType=VARCHAR},
			</if>
			<if test="reservePhone != null">
				reserve_phone = #{reservePhone,jdbcType=VARCHAR},
			</if>
			<if test="postcode != null">
				postcode = #{postcode,jdbcType=VARCHAR},
			</if>
			<if test="homeAddress != null">
				home_address = #{homeAddress,jdbcType=VARCHAR},
			</if>
			<if test="mailbox != null">
				mailbox = #{mailbox,jdbcType=VARCHAR},
			</if>
			<if test="true">
				quit_time = #{quitTime,jdbcType=DATE},
			</if>
			<if test="business != null">
				business = #{business,jdbcType=INTEGER},
			</if>
			<if test="quite != null">
				quite = #{quite,jdbcType=INTEGER},
			</if>
			<if test="operatorIdentifier != null">
				operator_identifier =
				#{operatorIdentifier,jdbcType=VARCHAR},
			</if>
			<if test="operatorTime != null">
				operator_time = #{operatorTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="idNumber != null">
				id_number = #{idNumber,jdbcType=VARCHAR},
			</if>
			<if test="warehouseId != null">
				warehouse_id = #{warehouseId,jdbcType=INTEGER},
			</if>
			 <if test="place != null">
				place=#{place,jdbcType=VARCHAR},
			</if>
			<if test="isDelete != null">
				is_delete = #{isDelete,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<update id="updateByPrimaryKey" parameterType="com.jl.psi.model.Person">
		update person
		set
		name = #{name,jdbcType=VARCHAR}, identifier =
		#{identifier,jdbcType=VARCHAR},
		login_name = #{loginName,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		type = #{type,jdbcType=VARCHAR},
		department_id = #{departmentId,jdbcType=INTEGER},
		entry_time =
		#{entryTime,jdbcType=DATE},
		duties = #{duties,jdbcType=VARCHAR},
		education = #{education,jdbcType=VARCHAR},
		sex =
		#{sex,jdbcType=VARCHAR},
		birth_time = #{birthTime,jdbcType=DATE},
		native_place = #{nativePlace,jdbcType=VARCHAR},
		phone =
		#{phone,jdbcType=VARCHAR},
		home_phone = #{homePhone,jdbcType=VARCHAR},
		common_phone = #{commonPhone,jdbcType=VARCHAR},
		reserve_phone =
		#{reservePhone,jdbcType=VARCHAR},
		postcode =
		#{postcode,jdbcType=VARCHAR},
		home_address =
		#{homeAddress,jdbcType=VARCHAR},
		mailbox = #{mailbox,jdbcType=VARCHAR},
		quit_time = #{quitTime,jdbcType=DATE},
		business =
		#{business,jdbcType=INTEGER},
		quite = #{quite,jdbcType=INTEGER},
		operator_identifier = #{operatorIdentifier,jdbcType=VARCHAR},
		operator_time = #{operatorTime,jdbcType=TIMESTAMP},
		remark =
		#{remark,jdbcType=VARCHAR},
		id_number = #{idNumber,jdbcType=VARCHAR},
		warehouse_id = #{warehouseId,jdbcType=INTEGER},
		is_delete = #{isDelete,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>




	<!--根据部门id获取所有的业务员 -->
	<select id="getAllPersonByDepartmentIdAndBusiness"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select * from person where
		business=1 and department_id
		=#{departmentId,jdbcType=INTEGER}
		and is_delete = 0

	</select>





	<!--14判断关联 根据员工id列表从客户/供应商获取编号 -->
	<select id="selectPersonIdentifierFromSupctoByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from supcto a, person c where
		(a.person_id= c.id OR a.operator_identifier = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
		and a.state != 11
	</select>


	<!-- 根据id列表获取信息 -->
	<select id="getPersonByIds" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select * from person where id in (
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)

	</select>

	<!-- 根据id列表删除信息 -->
	<delete id="deletePersonByIds" parameterType="java.util.List">
		<!-- delete from person where id in (
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		) -->
		update person set is_delete = 1 where id in (
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)

	</delete>





	<!--定义一个sql片段 -->
	<sql id="query_where">
		<if test="identifier!=null and identifier!=''">
			AND c.identifier like '%${identifier}%'
		</if>
		<if test="name!=null and name!=''">
			AND c.name like '%${name}%'
		</if>
		<if test="operatorIdentifier!=null and operatorIdentifier!=''">
			AND u.name like '%${operatorIdentifier}%'
		</if>
		<if test="place!=null and place!=''">
			AND c.place=#{place}
		</if>

		<if test="departmentId!=null and departmentId!=''">
			AND  d.id=${departmentId}
		</if>
		<if test="beginTime!=null and beginTime!=''">
			AND date_format(c.operator_time,'%Y-%m-%d') &gt;= #{beginTime}
			AND date_format(c.operator_time,'%Y-%m-%d') &lt;= #{endTime}
		</if>
	</sql>


	<select id="selectMsgOrderBySearchMsg" resultMap="BaseResultMap">
		SELECT
		c.*,
		u. NAME userName,
		d.name departmentName,
		w.name warehouseName
		FROM
		person c
		LEFT JOIN
		person u ON u.identifier = c.operator_identifier
		LEFT JOIN
		department d ON
		d.id = c.department_id
		LEFT JOIN warehouse w on w.id=c.warehouse_id
		where 1=1
		<include refid="query_where"></include>
	</select>
	
	<!-- 根据登录名获取管理员信息 -->
	<select id="selectAdminByLoginName" resultMap="BaseResultMap">
		SELECT
			p.*,d.`name` departmentName
		FROM
			person p
		LEFT JOIN department d ON p.department_id = d.id
		WHERE
			login_name=#{loginName}
		and p.is_delete = 0
	</select>
	
	<!-- 根据登录名和主键获取管理员信息 -->
	<select id="selectByPrimaryKeyAndLoginName" parameterType="com.jl.psi.model.Person"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from person
		where id != #{id,jdbcType=INTEGER}
		and login_name =
		#{loginName,jdbcType=VARCHAR}
		and is_delete = 0
	</select>
	
	<!-- 根据主键联合查询user表和permission权限表 -->
	<select id="selectAdminMsgById" resultMap="BaseResultMap">
		SELECT
		u.*,
		p.id AS pid,
		p.user_id,
		p.menu_id,
		p.operator_identifier AS poperator_identifier,
		p.create_time,
		m.id AS mid,
		m.parent_id AS mparent_id,
		m.`name` AS mname,
		m.url,
		m.icon,
		m.sort,
		m.is_effective
		FROM
		person AS u
		LEFT JOIN permission AS p ON u.id = p.user_id
		LEFT JOIN menu AS m ON p.menu_id = m.id
		WHERE
		u.id = #{id}
	</select>
	




	<!-- datatable 分页 start -->
	<!-- 查询记录总条数 -->
	<select id="iTotalRecords" resultType="java.lang.Integer">
		select count(1)
		FROM
		person
		c
		LEFT JOIN person u ON u.identifier = c.operator_identifier
		LEFT JOIN
		department d ON d.id = c.department_id
	</select>
	<!-- 查询所有信息 结果集 -->
	<select id="selectForSearch" resultMap="BaseResultMap">

		SELECT
		c.*,
		u. NAME userName,
		d.name departmentName,
		w.name warehouseName
		FROM
		person c
		LEFT JOIN
		person u ON u.identifier = c.operator_identifier
		LEFT JOIN
		department d ON
		d.id = c.department_id
		LEFT JOIN warehouse w on w.id=c.warehouse_id
		where 1=1
		<include refid="query_where"></include>

		<if test="desc!=null and desc!='' ">
			order by ${desc} desc
		</if>
		<if test="asc!=null and asc!=''">
			order by ${asc} asc
		</if>
		limit ${iDisplayStart},${pageDisplayLength}
	</select>
	<!-- 通过搜索条件过滤后的总记录 -->
	<select id="iTotalDisplayRecords" resultType="java.lang.Integer">
		select count(1)
		FROM
		person c
		LEFT JOIN person u ON u.identifier =
		c.operator_identifier
		LEFT JOIN
		department d ON d.id = c.department_id
		where 1=1
		<include refid="query_where"></include>

	</select>


	<!-- -1判断关联 根据员工id列表从盘点单获取编号 -->
	<select id="selectPersonIdentifierFromTakeStockOrderByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from take_stock_order a, person c where
		a.is_delete=0 and 
		(a.person_id= c.id OR a.originator = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
		<!--0判断关联 根据员工id列表从组装/拆卸单获取编号 -->
	<select id="selectPersonIdentifierFromPackageOrTeardownOrderByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from package_or_teardown_order a, person c where a.is_delete=0 and 
		(a.person_id= c.id OR a.originator = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
		<!--1判断关联 根据员工id列表从调拨单获取编号 -->
	<select id="selectPersonIdentifierFromAllotOrderByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from allot_order a, person c where
		(a.person_id= c.id OR a.originator = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
		<!--2判断关联 根据员工id列表从报损单获取编号 -->
	<select id="selectPersonIdentifierFromBreakageOrderByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from breakage_order a, person c where a.is_delete=0 and
		(a.person_id= c.id OR a.originator = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
		<!--9判断关联 根据员工id列表从销售订单获取编号 -->
	<select id="selectPersonIdentifierFromSalesOrderByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from sales_order a, person c where
		(a.person_id= c.id OR a.originator = c.identifier) and a.state!=37 and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
		<!--11判断关联 根据员工id列表从销售计划单获取编号 -->
	<select id="selectPersonIdentifierFromSalesPlanOrderByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from sales_plan_order a, person c where
		(a.person_id= c.id OR a.originator = c.identifier) and a.state!=4 and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
	
	<!--3判断关联 根据员工id列表从分类表获取编号 -->
	<select id="selectPersonIdentifierFromClassificationByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from classification a, person c where
		 a.operator_identifier = c.identifier and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
		and a.is_delete = 0
	</select>
	<!--4判断关联 根据员工id列表从商品规格表获取编号 -->
	<select id="selectPersonIdentifierFromCommoditySpecificationByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from commodity_specification a, person c where
		 a.operator_identifier = c.identifier and a.state!=10 and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
	<!--5判断关联 根据员工id列表从部门表获取编号 -->
	<select id="selectPersonIdentifierFromDepartmentByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from department a, person c where
		 a.operator_identifier = c.identifier and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
		and a.is_delete = 0
	</select>
	<!--6判断关联 根据员工id列表从日志表获取编号 -->
	<select id="selectPersonIdentifierFromLogByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from log a, person c where
		 a.operator_identifier = c.identifier and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
	<!--7判断关联 根据员工id列表从权限表获取编号 -->
	<select id="selectPersonIdentifierFromPermissionByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from permission a, person c where
		 a.operator_identifier = c.identifier and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
	<!--12判断关联 根据员工id列表从结算方式表获取编号 -->
	<select id="selectPersonIdentifierFromSettlementTypeByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from settlement_type a, person c where
		 a.operator_identifier = c.identifier and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
		and a.is_delete = 0
	</select>
	<!--13判断关联 根据员工id列表从运输方式表获取编号 -->
	<select id="selectPersonIdentifierFromShippingModeByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from shipping_mode a, person c where
		 a.operator_identifier = c.identifier and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
		and a.is_delete = 0
	</select>
	<!--15判断关联 根据员工id列表从仓库表获取编号 -->
	<select id="selectPersonIdentifierFromWarehouseByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from warehouse a, person c where
		 a.operator_identifier = c.identifier and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
		and c.warehouse_id>0
		and a.is_delete = 0
	</select>
	
	<!--8判断关联 根据员工id列表从采购订单获取编号 -->
	<select id="selectPersonIdentifierFromProcureTableByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from procure_table a, person c where a.is_delete=0 and
		 (a.originator = c.identifier or a.reviewer = c.identifier or a.terminator = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
	<!--10判断关联 根据员工id列表从销售订单审批表获取编号 -->
	<select id="selectPersonIdentifierFromSalesOrderReviewerByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from sales_order_reviewer a, person c,sales_order so where
		 a.reviewer_id = c.id and a.sales_order_id=so.id and so.state!=37 and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
		<!--18判断关联 根据员工id列表从销售订单审批表获取编号 -->
	<select id="selectPersonIdentifierFromBillsByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from bills a, person c where
		(a.person_id= c.id OR a.originator = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
		<!--19判断关联 根据员工id列表从销售订单审批表获取编号 -->
	<select id="selectPersonIdentifierFromWriteOffByPersonId" parameterType="java.util.List"
		resultMap="BaseResultMap">
		select DISTINCT(c.identifier) from writeoff a, person c where
		(a.person_id= c.id OR a.originator = c.identifier) and c.id in(
		<foreach collection="list" item="item" separator=",">
			#{item}
		</foreach>
		)
	</select>
</mapper>